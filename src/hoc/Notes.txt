Why Higher Order Components?
To Share common functionality between components.

HOC => A pattern where a function takes a component as an 
argument and returns a new component.

const NewComponent = higherOrderComponent( originalComponent );

Typically, HOC adds additional data or functionality to the original component.
So, new component can also be referred to as an enhanced component.

E.g. const ironMan = withSuit(TonyStark);
Here Tonystark is original component, withSuit is a function that will enhance 
TonyStark and return IronMan.

From react point of view
We have a function which accepts the original component, adds functionality
and returns an enhanced component or we have HOC pattern.

In HOC, we need to pass down the state and the incrementCount method as props
so that original component make use of that functionality.

Summary
A HOC is a pattern where a function accepts a component and returns 
an enhanced component.
HOC pattern used to share common functionality between components without having
to repeat the code.


When we pass down the props or specify props on the Counter component ,
the props are sent down to HOC not to Counter component.
So the props are pass down to the HOC but not to the component that is wrapped.

To fix this issues, we need to pass down the remaining props to the wrap component 
using the spread operator.


Summary
So when we create HOC, Make sure to pass down the rest of the props.